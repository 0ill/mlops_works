name: test-and-deploy

on:
  push: 

jobs:
  test:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: python -m pytest ./tests
# building docker in docker hub
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with: 
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest
  
  deploy-azure_terraform:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
         
      - name: Check for existing Resource Group
        id: check_resource_group
        run: |
          if az group show --name test-apps-dev; then
            echo "Resource Group exists."
            echo "::set-output name=exists::true"
          else
            echo "Resource Group does not exist."
            echo "::set-output name=exists::false"
          fi
  
      - name: Delete existing Resource Group
        if: steps.check_resource_group.outputs.exists == 'true'
        run: |
          echo "Deleting existing Resource Group..."
          az group delete --name test-apps-dev --yes --no-wait
  
      - name: Wait for Resource Group to be deleted
        if: steps.check_resource_group.outputs.exists == 'true'
        run: |
          echo "Waiting for Resource Group to be deleted..."
          while az group show --name test-apps-dev; do
            echo "Still deleting..."
            sleep 10
          done
          
      - name: Terraform Apply
        run: terraform apply -auto-approve 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          TF_VAR_resource_group_name: test-apps-dev
          TF_VAR_location: australiaeast
          

      - name: Update Container Apps
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az containerapp update \
            --name test-ap-dev \
            --resource-group test-apps-dev \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/test-app:latest \
            --query properties.configuration.ingress.fqdn