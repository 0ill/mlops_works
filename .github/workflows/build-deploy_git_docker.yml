name: test-and-deploy

on:
  push: 

jobs:
  test:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: python -m pytest ./tests
# building docker in docker hub
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with: 
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/azure:latest

  deploy-azure:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Create service principal
        run: |
          az ad sp create-for-rbac --name my-service-principal --role contributor --scopes /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }} --output json
          echo "##vso[task.setvariable variable=AZURE_CLIENT_ID;issecret=true]${AZURE_CLIENT_ID}"
          echo "##vso[task.setvariable variable=AZURE_TENANT_ID;issecret=true]${AZURE_TENANT_ID}"
          echo "##vso[task.setvariable variable=AZURE_CLIENT_SECRET;issecret=true]${AZURE_CLIENT_SECRET}"
      - name: 'Az login'
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      - name: 'Deploy container app' 
        uses: azure/CLI@v1
        with:
          az containerapp create --name test-app --resource-group test-apps --location centralus --environment test-apps --image ${{ secrets.DOCKERHUB_USERNAME }}/azure:latest --target-port 80 --ingress external --query properties.configuration.ingress.fqdn